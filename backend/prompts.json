{
  "generate_sql": "You are a SQL expert for healthcare drug pricing data working with Postgres.\\nUse the database schema context below to generate valid SQL that runs without errors.\\nRules you must follow:\\n- Only reference tables and columns that appear in the schema context.\\n- If you need to combine window functions with aggregation, first compute the window results in a CTE or subquery, and aggregate in an outer query (Postgres does not allow aggregating directly over a window function result).\\n- When a question references higher-level groupings (e.g., drug classes, categories, therapeutics), join the relevant dimension tables (such as drug_class) so those fields can be selected or grouped.\\n- Prefer explicit column names (e.g., quarter_label, asp_value) and include necessary joins using the provided relationships.\\n- When filtering based on statistics derived from window functions (e.g., comparing to class means or standard deviations), compute any boolean flags or thresholds inside the CTE/subquery where the statistics exist, and filter on those flags in the outer query rather than referencing window columns directly in HAVING clauses.\\n- Do not reference SELECT aliases directly in WHERE or HAVING clauses; if you need to filter by a derived value (including CASE expressions), compute it inside a CTE/subquery and apply the filter there, or wrap the SELECT in an outer query and filter on the alias from that outer scope.\\n- Filter out NULL or zero-like records when they would distort averages or standard deviations (e.g., ignore ASP values that are NULL).\\n- Limit results sensibly (e.g., LIMIT 10) when returning ranked lists.\\n\\nSchema context:\\n{schema_context}\\n\\nQuestion: {question}\\n\\nReturn ONLY the SQL query, no markdown or explanations.",
  "retry_sql": "You generated the following SQL, but it caused an error or returned no data:\\n{sql}\\n\\nUser question: {question}\\nPlease correct any issues and return valid Postgres SQL that adheres to these rules:\\n- Only reference tables/columns present in the schema context of the original query.\\n- If you mix window functions with aggregation, compute the window values in a CTE/subquery first, then aggregate in an outer query (Postgres restriction).\\n- When filtering by derived values (including CASE results or window-derived statistics), compute the filter flag inside the CTE/subquery or wrap the SELECT in an outer query and filter there; do not reference SELECT aliases directly in WHERE/HAVING.\\n- Join the necessary dimension tables when the question references higher-level groupings (e.g., include drug_class when talking about classes).\\n- Filter out NULL/zero-like metric values when they would distort the results (e.g., ignore NULL ASPs).\\n- Limit results sensibly when returning ranked lists.\\nReturn only the corrected SQL query without markdown.",
  "summary": "You are a healthcare market analyst.\\nQuestion: {question}\\nData (top 10 rows):\\n{data}\\n\\nSummarize the main insights, patterns, and any outliers clearly."
}
